from __future__ import division
import sys,os
print "INP1: Cluster2.fa file generated by Fastaformat complexfa function"
print "INP2: Path to CAP3  (~/packages/7_genome_sequencing/4_cap3/CAP3/cap3)"
print "INP3: Path to store the final contigs (mkdir 1_contigs)"
print "INP4: Path to store the overlap files (mkdir 2_overlapdir)"
print "INP5: Min. length of overlap (default: 50)"
print "INP6: Min %IDT (default: 90%)"
print "INP7: Max allowed overhang % length (default: 20%)" 
print "######"
file1=open(sys.argv[1],'r')
line1=file1.readline()

capdir=sys.argv[2]
conpath=sys.argv[3]
overpath=sys.argv[4]
minlen=int(sys.argv[5])
clustcount=0
#Set default min. length of overlap
if minlen=="":
    minlen1=50
else:
    minlen1=minlen

#Set default ID    
idt=float(sys.argv[6])
if idt=="":
    idt1=90
else:
    idt1=idt

#Set default overhang
overhang=float(sys.argv[7])
if overhang=="":
    overhang1=20
else:
    overhang1=overhang
    
out1=open(sys.argv[1]+".%sminlen%sOVHANG%sidtcap3"%(minlen1,overhang1,idt1),'w')
out1.write('#python %s\n'%(' '.join(sys.argv)))
cluster=1; list1=[]
tmp1=open("Clust%s.fa"%cluster,'w')
while line1:
    if line1.startswith('#len') or line1.startswith('#python'):
        pass
    else:
        #If line starts with # sign, process the chunk        
        if line1.startswith('#')==True:
            tmp1.close()
            
            eflag=0
            if len(list1)==1:
                eflag=1
            else:            
                #Run CAP3 on the FASTA file
                os.system('%s Clust%s.fa -h %s -p %s -o %s > %s/%s.fa.overlaps\n'%\
                          (capdir,cluster,overhang1,idt1,minlen1,overpath,cluster))
                sys.exit()

            if eflag==0:
                #Open CAP3 output and write results to the main output file
                capout=open('Clust%s.fa.cap.contigs'%cluster).readlines()
                for line in capout:
                    out1.write(line)
                capout=""

            #Remove all traces of previous run            
            os.system('rm -f Clust%s.fa.cap.contigs\n'%(cluster))
            cl=cluster
            os.system('rm -f Clust%s.fa Clust%s.fa.cap.ace Clust%s.fa.cap.contigs.links\n'%(cl,cl,cl))
            os.system('rm -f Clust%s.fa.cap.contigs.qual Clust%s.fa.cap.info Clust%s.fa.cap.singlets\n'%\
                      (cl,cl,cl))

            #Create new temp file
            cluster+=1; list1=[]
            if cluster%1000==0:
                print "Clusters completed: ", cluster
            tmp1=open("Clust%s.fa"%cluster,'w')
            
        else:
            tmp1.write(line1)
            if line1.startswith('>'):
                list1.append(line1.strip())
    line1=file1.readline()
file1.close()
out1.close()

print("Output file: ",sys.argv[1]+".%sminlen%sOVHANG%sidtcap3"%(minlen1,overhang1,idt1))
print "Clusters completed: ", cluster
print "All done!"
            
                
